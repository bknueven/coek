#!/usr/bin/env python
#
# Collect results and save in CSV file
#

import sys
import json
import os
from os.path import join, getsize

def get_runtimes(fname):
    ans = {}
    with open(fname,'r') as INPUT:
        for line in INPUT.readlines():
            line.strip()
            tmp = line.split(' ')
            ans[tmp[0]] = float(tmp[1])
    return ans

def collect_exp(fname, exp):
    try:
        name = fname.split('.')[0]
        tmp = name.split('_')
        if exp == 'writer':
            return name, dict(suffix=tmp[0], model=tmp[1], args=tmp[2:])
        elif exp == 'solve0':
            return name, dict(solver=tmp[0], model=tmp[1], args=tmp[2:])
    except:
        raise RuntimeError("Bad experiment: "+fname)
    raise RuntimeError("Unknown experiment: "+fname)

def get_filedata(fname):
    if not os.path.exists(fname):
        return {'lines':None, 'bytes':None}
    ans = {}
    with open(fname, 'r') as INPUT:
        ans['lines'] = len(INPUT.readlines())
    ans['bytes'] = os.path.getsize(fname)
    return ans

def collect_results(directory, save=False):
    print("Collecting data in {}".format(directory))
    exp = os.path.basename(directory)
    results = {}
    for root, dirs, files in os.walk(directory):
        if len(dirs) > 0:
            continue
        test = os.path.basename(root)
        print("  Collecting test results for "+test)
        results[test] = {}
        for fname in files:
            if fname.endswith('.log') or fname.endswith('.csv'):
                continue
            name, values = collect_exp(fname, exp)
            if name not in results[test]:
                results[test][name] = values
            else:
                results[test][name].update(values)
            if fname.endswith(".out"):
                results[test][name]['time'] = get_runtimes(join(root,fname))
                if len(results[test][name]['time']) == 0:
                    raise RuntimeError("Bad time info: "+fname)
            else:
                results[test][name]['size'] = get_filedata(join(root,fname))
        if save:
            if exp == 'writer':
                outfile = os.path.join(root,"results.csv")
                print("  Creating file {}".format(outfile))
                with open(os.path.join(root,"results.csv"),'w') as OUTPUT:
                    OUTPUT.write("Suffix,Model,Size,Test,Real,User,Lines,Bytes\n")
                    for name in results[test]:
                        tmp = results[test][name]
                        if 'timeout' in tmp['time']:
                            OUTPUT.write("{},{},{},{},,,,\n".format(tmp['suffix'], tmp['model'], tmp['args'][0], test))
                        else:
                            OUTPUT.write("{},{},{},{},{},{},{},{}\n".format(tmp['suffix'], tmp['model'], tmp['args'][0], test, tmp['time']['real'], tmp['time']['user'], tmp['size']['lines'], tmp['size']['bytes']))
            elif exp == 'solve0':
                outfile = os.path.join(root,"results.csv")
                print("  Creating file {}".format(outfile))
                with open(os.path.join(root,"results.csv"),'w') as OUTPUT:
                    OUTPUT.write("Sollver,Model,Size,Test,Real,User\n")
                    for name in results[test]:
                        tmp = results[test][name]
                        if 'timeout' in tmp['time']:
                            OUTPUT.write("{},{},{},{},,\n".format(tmp['solver'], tmp['model'], tmp['args'][0], test))
                        else:
                            OUTPUT.write("{},{},{},{},{},{}\n".format(tmp['solver'], tmp['model'], tmp['args'][0], test, tmp['time']['real'], tmp['time']['user']))
                
    #return results
    print("")


if __name__ == "__main__":
    directory = 'results' if len(sys.argv) < 2 else sys.argv[1]

    collect_results(directory+"/writer", save=True)
    collect_results(directory+"/solve0", save=True)
