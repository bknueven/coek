#!/usr/bin/env python
#
# Collect results and save in CSV file
#

import sys
import json
import os
from os.path import join, getsize
import statistics
import pprint

def get_runtimes(fname):
    with open(fname,'r') as INPUT:
        for line in INPUT.readlines():
            line.strip()
            tmp = line.split(' ')
            yield tmp[0], float(tmp[1])

def collect_exp(fname, exp):
    try:
        name = fname.split('.')[0]
        trial = int(fname.split('.')[1])
        tmp = name.split('_')
        if exp == 'writer':
            return name, dict(suffix=tmp[0], model=tmp[1], size=tmp[2:], data={}), trial
        elif exp == 'solve0':
            return name, dict(solver=tmp[0], model=tmp[1], size=tmp[2:], data={}), trial
    except:
        raise RuntimeError("Bad experiment: "+fname)
    raise RuntimeError("Unknown experiment: "+fname)

def get_filedata(fname):
    if not os.path.exists(fname):
        yield 'lines', None
        yield 'bytes', None
    else:
        with open(fname, 'r') as INPUT:
            yield 'lines', len(INPUT.readlines())
        yield 'bytes', os.path.getsize(fname)

def collect_results(directory, save=False):
    print("Collecting data in {}".format(directory))
    exp = os.path.basename(directory)
    for root, dirs, files in os.walk(directory):
        if len(dirs) > 0:
            continue

        #
        # Collect results
        #
        test = os.path.basename(root)
        results = {"_experiment":exp, "_tool":test}
        print("  Collecting test results for "+test)
        for fname in files:
            if fname.endswith('.log') or fname.endswith('.csv') or fname.endswith('.json'):
                continue
            name, values, trial = collect_exp(fname, exp)
            if name not in results:
                results[name] = values
            if fname.endswith(".out"):
                tmp = results[name]['data']
                for k,v in get_runtimes(join(root,fname)):
                    if k not in tmp:
                        tmp[k] = {"trials":{}}
                    tmp[k]['trials'][str(trial)] = v
            elif fname.endswith(".lp") or fname.endswith(".nl"):
                tmp = results[name]['data']
                for k,v in get_filedata(join(root,fname)):
                    if k not in tmp:
                        tmp[k] = {"trials":{}}
                    tmp[k]['trials'][str(trial)] = v

        #
        # Summarize results
        #
        for name in results:
            if name[0] == "_":
                continue
            for measure in results[name]['data']:
                values = list(results[name]['data'][measure]['trials'].values())
                results[name]['data'][measure]['mean'] = statistics.mean(values)
                results[name]['data'][measure]['median'] = statistics.median(values)
                results[name]['data'][measure]['variance'] = statistics.variance(values)
                results[name]['data'][measure]['stdev'] = statistics.stdev(values)
                results[name]['data'][measure]['min'] = min(values)
                results[name]['data'][measure]['max'] = max(values)

        #
        # Save results
        #
        if save:
            outfile = os.path.join(root,"results.json")
            print("    Writing",outfile)
            with open(outfile,'w') as OUTPUT:
                json.dump(results, OUTPUT, indent=4, sort_keys=True)


if __name__ == "__main__":
    directory = 'results' if len(sys.argv) < 2 else sys.argv[1]

    collect_results(directory+"/writer", save=True)
    collect_results(directory+"/solve0", save=True)
