#!/usr/bin/env python
#
# Generate graphs and other summaries of the results
#

import sys
import json
import os
from os.path import join, getsize
import pprint
import csv
from tabulate import tabulate

def load_results(directory):
    results = {}
    for root, dirs, files in os.walk(directory):
        for f in files:
            if not f == 'results.csv':
                continue
            test = os.path.basename(root)
            results[test] = []
            print("  Collecting test results for "+test)
            with open(join(root,f), 'r') as INPUT:
                reader = csv.reader(INPUT)
                first = True
                for row in reader:
                    if first:
                        first = False
                        continue
                    results[test].append(row)
    return results


def writer_lp(data, largest=False):
    for problem in ['knapsack', 'pmedian', 'lqcp', 'fac', 'nqueens']:
        results = []
        for test,rows in data.items():
            for row in rows:
                if row[0] != 'lp':
                    continue
                if not row[1].startswith(problem):
                    continue
                if row[4] == "":
                    results.append([row[1], int(row[2]), row[3], None, None, None, None])
                else:
                    results.append([row[1], int(row[2]), row[3], float(row[4]), float(row[5]), int(row[6]), int(row[7])])

        #pprint.pprint(results)
        if largest:
            l = max(r[1] for r in results)
            results = [r for r in results if r[1] == l]

        g_real = {}
        g_user = {}
        g_lines = {}
        g_bytes = {}
        for r in results:
            if r[2] == 'gurobi':
                g_real[r[1]] = r[3]
                g_user[r[1]] = r[4]
                g_lines[r[1]] = r[5]
                g_bytes[r[1]] = r[6]
        for r in results:
            if r[3] is None:
                r.append(r[3])
                r.append(r[4])
                r.append(r[5])
                r.append(r[6])
            elif r[1] in g_real:
                r.append(r[3]/g_real[r[1]])
                r.append(r[4]/g_user[r[1]])
                r.append(r[5]/g_lines[r[1]])
                r.append(r[6]/g_bytes[r[1]])
            else:
                r.append(None)
                r.append(None)
                r.append(None)
                r.append(None)
        print("")
        print(tabulate(sorted(results,key=lambda x:(x[0].split('-')[0],x[2],x[0],x[1])), headers=["Model", "Size", "Test", "Real", "User", "Lines", "Bytes", "RealRatio", "UserRatio", "LinesRatio", "BytesRatio"]))


def solve0(data, largest=False):
    for problem in ['knapsack', 'pmedian', 'lqcp', 'fac', 'nqueens']:
        results = []
        for test,rows in data.items():
            for row in rows:
                if not row[1].startswith(problem):
                    continue
                if row[4] == "":
                    results.append([row[1], int(row[2]), row[3], None, None])
                else:
                    results.append([row[1], int(row[2]), row[3], float(row[4]), float(row[5])])

        #pprint.pprint(results)
        if largest:
            l = max(r[1] for r in results)
            results = [r for r in results if r[1] == l]

        g_real = {}
        g_user = {}
        for r in results:
            if r[2] == 'gurobi':
                g_real[r[1]] = r[3]
                g_user[r[1]] = r[4]
        for r in results:
            if r[3] is None:
                r.append(r[3])
                r.append(r[4])
            elif r[1] in g_real:
                r.append(r[3]/g_real[r[1]])
                r.append(r[4]/g_user[r[1]])
            else:
                r.append(None)
                r.append(None)
        print("")
        print(tabulate(sorted(results,key=lambda x:(x[0].split('-')[0],x[2],x[0],x[1])), headers=["Model", "Size", "Test", "Real", "User", "RealRatio", "UserRatio"]))


if __name__ == "__main__":
    directory = 'results' if len(sys.argv) < 3 else sys.argv[2]

    if False:
        pass

    elif sys.argv[1] == "writer":
        data = load_results(directory+"/writer")
        writer_lp(data)

    elif sys.argv[1] == "writer_largest":
        data = load_results(directory+"/writer")
        writer_lp(data, largest=True)

    elif sys.argv[1] == "solve0":
        data = load_results(directory+"/solve0")
        solve0(data, largest=False)

    elif sys.argv[1] == "solve0_largest":
        data = load_results(directory+"/solve0")
        solve0(data, largest=True)

    elif sys.argv[1] == "print_raw":
        pprint.pprint(load_results(directory+"/writer"))
        
    else:
        print("dog options")
        print("  writer")
        print("  writer_largest")
        print("  solve0")
        print("  solve0_largest")
        print("  print_raw")
