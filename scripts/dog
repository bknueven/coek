#!/usr/bin/env python
#
# Generate graphs and other summaries of the results
#

import sys
import json
import os
from os.path import join, getsize
import pprint
import json
from tabulate import tabulate

def load_results(directory):
    results = {}
    for root, dirs, files in os.walk(directory):
        for f in files:
            if not f == 'results.json':
                continue
            tool = os.path.basename(root)
            results[tool] = []
            print("  Collecting test results for "+tool)
            with open(join(root,f), 'r') as INPUT:
                results[tool] = json.load(INPUT)
    return results


def writer_lp(data, largest=False):
    for problem in ['knapsack', 'pmedian', 'lqcp', 'fac', 'nqueens']:
        results = []
        for tool,tooldata in data.items():
            for name,exp in tooldata.items():
                if name.startswith("_"):
                    continue
                if exp['suffix'] != 'lp':
                    continue
                if not exp['model'].startswith(problem):
                    continue
                res = [exp['model'], int(exp['size'][0]), tool]
                if len(exp['data']['real']['trials']) == 0:
                    results.append( res + [None, None, None, None, None, None] )
                else:
                    results.append( res + [exp['data']['real']['mean'], exp['data']['real']['stdev'],
                                           exp['data']['user']['mean'], exp['data']['user']['stdev'],
                                           exp['data']['lines']['mean'], 
                                           exp['data']['bytes']['mean']] )

        #pprint.pprint(results)
        if largest:
            l = max(r[1] for r in results)
            results = [r for r in results if r[1] == l]

        g_real = {}
        g_user = {}
        g_lines = {}
        g_bytes = {}
        for r in results:
            if r[2] == 'gurobi':
                g_real[r[1]] = r[3]
                g_user[r[1]] = r[5]
                g_lines[r[1]] = r[7]
                g_bytes[r[1]] = r[8]
        for r in results:
            if r[3] is None:
                r.append(r[3])
                r.append(r[5])
                r.append(r[7])
                r.append(r[8])
            elif r[1] in g_real:
                r.append(r[3]/g_real[r[1]])
                r.append(r[5]/g_user[r[1]])
                r.append(r[7]/g_lines[r[1]])
                r.append(r[8]/g_bytes[r[1]])
            else:
                r.append(None)
                r.append(None)
                r.append(None)
                r.append(None)
        print("")
        print(tabulate(sorted(results,key=lambda x:(x[0].split('-')[0],x[2],x[0],x[1])), headers=["Model", "Size", "Test", "Mean Real", "Stdev Real", "Mean User", "Stdev User", "Lines", "Bytes", "RealRatio", "UserRatio", "LinesRatio", "BytesRatio"]))


def solve0(data, largest=False):
    for problem in ['knapsack', 'pmedian', 'lqcp', 'fac', 'nqueens']:
        results = []
        for tool,tooldata in data.items():
            for name,exp in tooldata.items():
                if name.startswith("_"):
                    continue
                if not exp['model'].startswith(problem):
                    continue
                res = [exp['model'], int(exp['size'][0]), tool]
                if len(exp['data']['real']['trials']) == 0:
                    results.append( res + [None, None, None, None] )
                else:
                    results.append( res + [exp['data']['real']['mean'], exp['data']['real']['stdev'],
                                           exp['data']['user']['mean'], exp['data']['user']['stdev']] )

        #pprint.pprint(results)
        if largest:
            l = max(r[1] for r in results)
            results = [r for r in results if r[1] == l]

        g_real = {}
        g_user = {}
        for r in results:
            if r[2] == 'gurobi':
                g_real[r[1]] = r[3]
                g_user[r[1]] = r[5]
        for r in results:
            if r[3] is None:
                r.append(r[3])
                r.append(r[4])
            elif r[1] in g_real:
                r.append(r[3]/g_real[r[1]])
                r.append(r[5]/g_user[r[1]])
            else:
                r.append(None)
                r.append(None)
        print("")
        print(tabulate(sorted(results,key=lambda x:(x[0].split('-')[0],x[2],x[0],x[1])), headers=["Model", "Size", "Test", "Mean Real", "Stdev Real", "Mean User", "Stdev User", "RealRatio", "UserRatio"]))


if __name__ == "__main__":
    directory = 'results' if len(sys.argv) < 3 else sys.argv[2]

    if False:
        pass

    elif sys.argv[1] == "writer":
        data = load_results(directory+"/writer")
        writer_lp(data)

    elif sys.argv[1] == "writer_largest":
        data = load_results(directory+"/writer")
        writer_lp(data, largest=True)

    elif sys.argv[1] == "solve0":
        data = load_results(directory+"/solve0")
        solve0(data, largest=False)

    elif sys.argv[1] == "solve0_largest":
        data = load_results(directory+"/solve0")
        solve0(data, largest=True)

    elif sys.argv[1] == "print_raw":
        pprint.pprint(load_results(directory+"/writer"))
        
    else:
        print("dog options")
        print("  writer")
        print("  writer_largest")
        print("  solve0")
        print("  solve0_largest")
        print("  print_raw")
